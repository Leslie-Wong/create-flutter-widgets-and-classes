{
  "name": "create-flutter-widgets-and-classes",
  "displayName": "Create Flutter Widgets and Classes",
  "description": "Extension that creates Flutter Stateless or Stateful Widgets, MobX Store and Classes.",
  "version": "2.0.0",
  "publisher": "ricardo-emerson",
  "repository": "https://github.com/ricardoemerson/create-flutter-widgets-and-classes",
  "icon": "images/logo.png",
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "keywords": [
    "create",
    "dart",
    "flutter",
    "widget",
    "widgets",
    "component",
    "components",
    "stateless",
    "stateful",
    "screen",
    "screens",
    "view",
    "views",
    "class",
    "interface",
    "provider",
    "repository",
    "service",
    "getx",
    "mobx",
    "store"
  ],
  "engines": {
    "vscode": "^1.17.0"
  },
  "activationEvents": [
    "onCommand:extension.create-stateless-widget",
    "onCommand:extension.create-stateful-widget",
    "onCommand:extension.create-getx-app-structure",
    "onCommand:extension.create-getx-feature",
    "onCommand:extension.create-getx-service",
    "onCommand:extension.create-mobx-store",
    "onCommand:extension.create-interface-provider",
    "onCommand:extension.create-interface-repository",
    "onCommand:extension.create-interface-service",
    "onCommand:extension.create-class",
    "onCommand:extension.create-controller",
    "onCommand:extension.create-dto",
    "onCommand:extension.create-interface",
    "onCommand:extension.create-model",
    "workspaceContains:pubspec.yaml"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "üî∂ Create Stateless Widget",
        "command": "extension.create-stateless-widget"
      },
      {
        "title": "üî∑ Create Stateful Widget",
        "command": "extension.create-stateful-widget"
      },
      {
        "title": "üìÇ Create GetX App Structure",
        "command": "extension.create-getx-app-structure"
      },
      {
        "title": "üìë Create GetX Feature",
        "command": "extension.create-getx-feature"
      },
      {
        "title": "üóÉÔ∏è Create GetX Service",
        "command": "extension.create-getx-service"
      },
      {
        "title": "üì¶ Create MobX Store",
        "command": "extension.create-mobx-store"
      },
      {
        "title": "üìÑ Create Provider Interface",
        "command": "extension.create-interface-provider"
      },
      {
        "title": "üìÑ Create Repository Interface",
        "command": "extension.create-interface-repository"
      },
      {
        "title": "üìÑ Create Service Interface",
        "command": "extension.create-interface-service"
      },
      {
        "title": "üìù Create Class",
        "command": "extension.create-class"
      },
      {
        "title": "üìù Create Controller",
        "command": "extension.create-controller"
      },
      {
        "title": "üìù Create DTO",
        "command": "extension.create-dto"
      },
      {
        "title": "üìù Create Interface",
        "command": "extension.create-interface"
      },
      {
        "title": "üìù Create Model",
        "command": "extension.create-model"
      },
      {
        "title": "Implements interface",
        "command": "extension.implementsInterface"
      },
      {
        "title": "Wrap with LayoutBuilder",
        "command": "extension.wrapWithLayoutBuilder"
      },
      {
        "title": "Wrap with Expanded",
        "command": "extension.wrapWithExpanded"
      },
      {
        "title": "Wrap with Stack",
        "command": "extension.wrapWithStack"
      },
      {
        "title": "Wrap with Positioned",
        "command": "extension.wrapWithPositioned"
      },
      {
        "title": "Wrap with Align",
        "command": "extension.wrapWithAlign"
      },
      {
        "title": "Wrap with ClipRRect",
        "command": "extension.wrapWithClipRRect"
      },
      {
        "title": "Wrap with Hero",
        "command": "extension.wrapWithHero"
      },
      {
        "title": "Wrap with GestureDetector",
        "command": "extension.wrapWithGestureDetector"
      },
      {
        "title": "Wrap with SingleChildScrollView",
        "command": "extension.wrapWithSingleChildScrollView"
      },
      {
        "title": "Wrap with SafeArea",
        "command": "extension.wrapWithSafeArea"
      },
      {
        "title": "Wrap with Form",
        "command": "extension.wrapWithForm"
      },
      {
        "title": "Wrap with Obx",
        "command": "extension.wrapWithObx"
      },
      {
        "title": "Wrap with Observer",
        "command": "extension.wrapWithObserver"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "extension.create-stateless-widget",
          "group": "2a_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-stateful-widget",
          "group": "2a_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-getx-app-structure",
          "group": "2b_modification",
          "when": "explorerResourceIsFolder && config.createFlutterWidgetsAndClasses.getxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-getx-feature",
          "group": "2b_modification",
          "when": "explorerResourceIsFolder && config.createFlutterWidgetsAndClasses.getxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-getx-service",
          "group": "2b_modification",
          "when": "explorerResourceIsFolder && config.createFlutterWidgetsAndClasses.getxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-mobx-store",
          "group": "2c_modification",
          "when": "explorerResourceIsFolder && config.createFlutterWidgetsAndClasses.mobxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-interface-provider",
          "group": "2d_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-interface-repository",
          "group": "2d_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-interface-service",
          "group": "2d_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-class",
          "group": "2e_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-controller",
          "group": "2e_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-dto",
          "group": "2e_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-interface",
          "group": "2e_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-model",
          "group": "2e_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.implementsInterface",
          "when": "editorLangId == dart"
        }
      ],
      "commandPalette": [
        {
          "command": "extension.wrapWithLayoutBuilder",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithExpanded",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithStack",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithPositioned",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithAlign",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithClipRRect",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithHero",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithGestureDetector",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithSingleChildScrollView",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithSafeArea",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithForm",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithObx",
          "when": "editorLangId == dart && config.createFlutterWidgetsAndClasses.getxDisplayContextMenu == true"
        },
        {
          "command": "extension.wrapWithObserver",
          "when": "editorLangId == dart && config.createFlutterWidgetsAndClasses.mobxDisplayContextMenu == true"
        }
      ]
    },
    "configuration": {
      "title": "Create Flutter Widgets and Classes",
      "properties": {
        "createFlutterWidgetsAndClasses.useIPrefixForInterfaces": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines whether an interface will be created using `I` with prefix to the interface name."
        },
        "createFlutterWidgetsAndClasses.createImplementationOfInterface": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines whether the implementation class of an interface will be created together."
        },
        "createFlutterWidgetsAndClasses.createFolderForInterfaces": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if it will create a folder to contain the interface and implementation only for Providers, Repositories and Services."
        },
        "createFlutterWidgetsAndClasses.getxDisplayContextMenu": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if the context menu with GetX features will be displayed."
        },
        "createFlutterWidgetsAndClasses.getxViewsSuffix": {
          "type": "string",
          "enum": [
            "Page",
            "Screen",
            "View"
          ],
          "default": "Page",
          "markdownDescription": "Default suffix name for the GetX view layer."
        },
        "createFlutterWidgetsAndClasses.getxProjectPath": {
          "type": "string",
          "enum": [
            "/lib/app",
            "/lib"
          ],
          "default": "/lib/app",
          "markdownDescription": "Default path for the GetX Project folders and files."
        },
        "createFlutterWidgetsAndClasses.mobxFileSuffix": {
          "type": "string",
          "enum": [
            "Store",
            "Controller"
          ],
          "default": "Store",
          "markdownDescription": "Default suffix name for the MobX store."
        },
        "createFlutterWidgetsAndClasses.mobxDisplayContextMenu": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if the context menu with MobX features will be displayed."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "yarn run compile && node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/lodash": "^4.14.168",
    "@types/mkdirp": "^1.0.2",
    "@types/node": "^12.6.8",
    "tslint": "^5.12.1",
    "typescript": "^3.3.1",
    "vscode": "^1.1.28"
  },
  "dependencies": {
    "fs": "^0.0.1-security",
    "lodash": "^4.17.21",
    "mkdirp": "^1.0.4"
  }
}
