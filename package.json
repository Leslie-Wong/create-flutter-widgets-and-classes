{
  "name": "create-flutter-widgets-and-classes",
  "displayName": "Flutter Tools",
  "description": "This extension creates Stateless Widgets, Stateful Widgets, GetX App Structure, GetX Features, GetX Services, MobX Store, Classes, Interfaces, and you can also apply to existing widgets new wrappers in your Flutter projects.",
  "version": "3.6.0",
  "publisher": "ricardo-emerson",
  "repository": "https://github.com/ricardoemerson/create-flutter-widgets-and-classes",
  "icon": "images/logo.png",
  "categories": [
    "Programming Languages",
    "Other"
  ],
  "keywords": [
    "dart",
    "flutter",
    "widgets",
    "components",
    "stateless",
    "stateful",
    "page",
    "screen",
    "view",
    "class",
    "interface",
    "provider",
    "repository",
    "service",
    "getx",
    "mobx",
    "modular",
    "store",
    "feature",
    "wrap",
    "expanded",
    "stack",
    "positioned",
    "align",
    "hero",
    "safearea",
    "obs",
    "observer",
    "tools",
    "utilities"
  ],
  "engines": {
    "vscode": "^1.65.0"
  },
  "sponsor": {
    "url": "https://github.com/sponsors/ricardoemerson"
  },
  "activationEvents": [
    "onCommand:extension.create-stateless-widget",
    "onCommand:extension.create-stateful-widget",
    "onCommand:extension.create-getx-app-structure",
    "onCommand:extension.create-getx-feature",
    "onCommand:extension.create-getx-service",
    "onCommand:extension.create-mobx-store",
    "onCommand:extension.create-class",
    "onCommand:extension.create-interface",
    "onCommand:extension.selectWidget",
    "workspaceContains:pubspec.yaml"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [
      {
        "title": "üî∂ Create Stateless Widget",
        "command": "extension.create-stateless-widget"
      },
      {
        "title": "üî∑ Create Stateful Widget",
        "command": "extension.create-stateful-widget"
      },
      {
        "title": "üìÇ Create GetX App Structure",
        "command": "extension.create-getx-app-structure"
      },
      {
        "title": "üìë Create GetX Feature",
        "command": "extension.create-getx-feature"
      },
      {
        "title": "üóÉÔ∏è Create GetX Service",
        "command": "extension.create-getx-service"
      },
      {
        "title": "üì¶ Create MobX Store",
        "command": "extension.create-mobx-store"
      },
      {
        "title": "üìù Create Class",
        "command": "extension.create-class"
      },
      {
        "title": "üóíÔ∏è Create Interface",
        "command": "extension.create-interface"
      },
      {
        "title": "Implements interface",
        "command": "extension.implementsInterface"
      },
      {
        "title": "Wrap with Expanded",
        "command": "extension.wrapWithExpanded"
      },
      {
        "title": "Wrap with Flexible",
        "command": "extension.wrapWithFlexible"
      },
      {
        "title": "Wrap with Observer for MobX",
        "command": "extension.wrapWithObserver"
      },
      {
        "title": "Wrap with Obx for GetX",
        "command": "extension.wrapWithObx"
      },
      {
        "title": "Flutter Tools - Wrap with widget...",
        "command": "extension.wrapWithWidget"
      },
      {
				"command": "extension.selectWidget",
				"title": "Select a widget"
			}
    ],
    "keybindings" : [
			{
				"command": "extension.selectWidget",
				"key": "alt+w",
				"mac": "alt+w",
				"when": "editorFocus"
			},
			{
				"command": "extension.wrapWithWidget",
				"key": "shift+alt+w",
				"mac": "shift+alt+w",
				"when": "editorFocus"
			}
		],
    "menus": {
      "explorer/context": [
        {
          "command": "extension.create-stateless-widget",
          "group": "2a_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-stateful-widget",
          "group": "2a_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-getx-app-structure",
          "group": "2b_modification",
          "when": "explorerResourceIsFolder && config.flutterTools.getxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-getx-feature",
          "group": "2b_modification",
          "when": "explorerResourceIsFolder && config.flutterTools.getxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-getx-service",
          "group": "2b_modification",
          "when": "explorerResourceIsFolder && config.flutterTools.getxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-mobx-store",
          "group": "2c_modification",
          "when": "explorerResourceIsFolder && config.flutterTools.mobxDisplayContextMenu == true"
        },
        {
          "command": "extension.create-interface",
          "group": "2d_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.create-class",
          "group": "2d_modification",
          "when": "explorerResourceIsFolder"
        },
        {
          "command": "extension.implementsInterface",
          "when": "editorLangId == dart"
        }
      ],
      "commandPalette": [
        {
          "command": "extension.wrapWithExpanded",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithFlexible",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithWidget",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithObserver",
          "when": "editorLangId == dart"
        },
        {
          "command": "extension.wrapWithObx",
          "when": "editorLangId == dart"
        }
      ]
    },
    "snippets": [
      {
        "language": "dart",
        "path": "./snippets/flutter.json"
      },
      {
        "language": "dart",
        "path": "./snippets/widgets.json"
      },
      {
        "language": "dart",
        "path": "./snippets/getx.json"
      },
      {
        "language": "dart",
        "path": "./snippets/provider.json"
      },
      {
        "language": "dart",
        "path": "./snippets/modular.json"
      }
    ],
    "configuration": {
      "title": "Flutter Tools",
      "properties": {
        "flutterTools.useIPrefixForInterfaces": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines whether an interface will be created using `I` with prefix to the interface name."
        },
        "flutterTools.createImplementationOfInterface": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines whether the implementation class of an interface will be created together."
        },
        "flutterTools.createFolderForInterfaces": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if it will create a folder to contain the interface and implementation only for Providers, Repositories and Services."
        },
        "flutterTools.getxUseConstructorTearOffs": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if the Bindings and Routes files will use the new Dart language feature named Constructor tear-offs."
        },
        "flutterTools.getxDisplayContextMenu": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if the context menu with GetX features will be displayed."
        },
        "flutterTools.getxViewsSuffix": {
          "type": "string",
          "enum": [
            "Page",
            "Screen",
            "View"
          ],
          "default": "Page",
          "markdownDescription": "Default suffix name for the GetX view layer."
        },
        "flutterTools.getxProjectPath": {
          "type": "string",
          "enum": [
            "/lib/app",
            "/lib"
          ],
          "default": "/lib/app",
          "markdownDescription": "Default path for the GetX Project folders and files."
        },
        "flutterTools.mobxDisplayContextMenu": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if the context menu with MobX features will be displayed."
        },
        "flutterTools.widgetsViewsSuffix": {
          "type": "string",
          "enum": [
            "Page",
            "Screen",
            "View"
          ],
          "default": "Page",
          "markdownDescription": "Default suffix name for the Widgets views."
        },
        "flutterTools.createFolderForWidgetsPage": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Defines if it will create a folder to contain the widget."
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "yarn run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "yarn run compile && node ./node_modules/vscode/bin/test"
  },
  "devDependencies": {
    "@types/lodash": "^4.14.168",
    "@types/mkdirp": "^1.0.2",
    "@types/node": "^12.6.8",
    "@typescript-eslint/eslint-plugin": "^5.29.0",
    "@typescript-eslint/parser": "^5.29.0",
    "eslint": "^8.17.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-import-resolver-typescript": "^2.7.1",
    "eslint-plugin-import-helpers": "^1.2.1",
    "eslint-plugin-prettier": "^4.0.0",
    "prettier": "^2.7.1",
    "tslint": "^5.12.1",
    "typescript": "^3.3.1",
    "vscode": "^1.1.28"
  },
  "dependencies": {
    "fs": "^0.0.1-security",
    "lodash": "^4.17.21",
    "mkdirp": "^1.0.4"
  }
}
